services:
  postgres:
    image: postgres:alpine
    env_file: apps/backend/.env
    container_name: job-board-postgres
    environment:
      POSTGRES_DB: ${PG_DB:-jobboard}
      POSTGRES_USER: ${PG_USER:-jobboard_user}
      POSTGRES_PASSWORD: ${PG_PASSWORD:-jobboard_password}
    ports:
      - '${PG_PORT:-5432}:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test:
        [
          'CMD-SHELL',
          'pg_isready -U $${PG_USER:-jobboard_user} -d $${PG_DB:-jobboard}',
        ]
      interval: 5s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: .
      dockerfile: ./apps/backend/Dockerfile
    user: "1001:1001"
    restart: unless-stopped
    env_file: apps/backend/.env
    container_name: job-board-backend
    ports:
      - '${PORT:-3000}:${PORT:-3000}'
    volumes:
      - ./apps/backend:/app/apps/backend
      - backend_node_modules:/app/node_modules
    depends_on:
      postgres:
        condition: service_healthy

  frontend:
    build:
      context: .
      dockerfile: apps/frontend/Dockerfile
    user: "1001:1001"
    restart: unless-stopped
    env_file: apps/frontend/.env
    container_name: job-board-frontend
    ports:
      - '${PORT:-5173}:${PORT:-5173}'
    volumes:
      - ./apps/frontend:/app/apps/frontend
      - frontend_node_modules:/app/node_modules
    environment:
      - NODE_ENV=development
      - BUN_INSTALL_CACHE=/app/.bun-cache
      - CHOKIDAR_USEPOLLING=true
    depends_on:
      - backend

volumes:
  backend_node_modules:
  frontend_node_modules:
  postgres_data:
    driver: local
